//
//Copyright 2024 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the Vitess topology related data structures.
// Very few of these structures are exchanged over the wire (only
// TabletType and KeyRange), but they are all used by the topology
// service.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: provisioner.proto

package provisioner

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	topodata "vitess.io/vitess/go/vt/proto/topodata"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProvisionTabletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cell is the cell (or datacenter) the tablet should be provisioned under
	Cell           string              `protobuf:"bytes,1,opt,name=cell,proto3" json:"cell,omitempty"`
	Keyspace       string              `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard          string              `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
	Type           topodata.TabletType `protobuf:"varint,4,opt,name=type,proto3,enum=topodata.TabletType" json:"type,omitempty"`
	DbNameOverride string              `protobuf:"bytes,5,opt,name=dbNameOverride,proto3" json:"dbNameOverride,omitempty"`
	Attributes     map[string]string   `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProvisionTabletRequest) Reset() {
	*x = ProvisionTabletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provisioner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionTabletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionTabletRequest) ProtoMessage() {}

func (x *ProvisionTabletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provisioner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionTabletRequest.ProtoReflect.Descriptor instead.
func (*ProvisionTabletRequest) Descriptor() ([]byte, []int) {
	return file_provisioner_proto_rawDescGZIP(), []int{0}
}

func (x *ProvisionTabletRequest) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

func (x *ProvisionTabletRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ProvisionTabletRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ProvisionTabletRequest) GetType() topodata.TabletType {
	if x != nil {
		return x.Type
	}
	return topodata.TabletType(0)
}

func (x *ProvisionTabletRequest) GetDbNameOverride() string {
	if x != nil {
		return x.DbNameOverride
	}
	return ""
}

func (x *ProvisionTabletRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ProvisionShardCellTablets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cell is the cell (or datacenter) the tablets should be provisioned under
	Cell string `protobuf:"bytes,1,opt,name=cell,proto3" json:"cell,omitempty"`
	// tabletTypes specifys the number of tablets to provision by type
	TabletTypes map[string]int64 `protobuf:"bytes,2,rep,name=tabletTypes,proto3" json:"tabletTypes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ProvisionShardCellTablets) Reset() {
	*x = ProvisionShardCellTablets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provisioner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionShardCellTablets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionShardCellTablets) ProtoMessage() {}

func (x *ProvisionShardCellTablets) ProtoReflect() protoreflect.Message {
	mi := &file_provisioner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionShardCellTablets.ProtoReflect.Descriptor instead.
func (*ProvisionShardCellTablets) Descriptor() ([]byte, []int) {
	return file_provisioner_proto_rawDescGZIP(), []int{1}
}

func (x *ProvisionShardCellTablets) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

func (x *ProvisionShardCellTablets) GetTabletTypes() map[string]int64 {
	if x != nil {
		return x.TabletTypes
	}
	return nil
}

type ProvisionShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// keyspace is the keyspace to provision a shard under
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// shard is the shard key range
	Shard string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// dbNameOverride is...TODO
	DbNameOverride string `protobuf:"bytes,3,opt,name=dbNameOverride,proto3" json:"dbNameOverride,omitempty"`
	// tablets lists the required tablets grouped by cell
	Tablets []*ProvisionShardCellTablets `protobuf:"bytes,4,rep,name=tablets,proto3" json:"tablets,omitempty"`
}

func (x *ProvisionShardRequest) Reset() {
	*x = ProvisionShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provisioner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionShardRequest) ProtoMessage() {}

func (x *ProvisionShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provisioner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionShardRequest.ProtoReflect.Descriptor instead.
func (*ProvisionShardRequest) Descriptor() ([]byte, []int) {
	return file_provisioner_proto_rawDescGZIP(), []int{2}
}

func (x *ProvisionShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ProvisionShardRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ProvisionShardRequest) GetDbNameOverride() string {
	if x != nil {
		return x.DbNameOverride
	}
	return ""
}

func (x *ProvisionShardRequest) GetTablets() []*ProvisionShardCellTablets {
	if x != nil {
		return x.Tablets
	}
	return nil
}

var File_provisioner_proto protoreflect.FileDescriptor

var file_provisioner_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x1a, 0x0e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc4, 0x02, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x59, 0x0a, 0x0b, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x3b, 0x0a, 0x0f, 0x69, 0x6f,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x28, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f,
	0x67, 0x6f, 0x2f, 0x76, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_provisioner_proto_rawDescOnce sync.Once
	file_provisioner_proto_rawDescData = file_provisioner_proto_rawDesc
)

func file_provisioner_proto_rawDescGZIP() []byte {
	file_provisioner_proto_rawDescOnce.Do(func() {
		file_provisioner_proto_rawDescData = protoimpl.X.CompressGZIP(file_provisioner_proto_rawDescData)
	})
	return file_provisioner_proto_rawDescData
}

var file_provisioner_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_provisioner_proto_goTypes = []interface{}{
	(*ProvisionTabletRequest)(nil),    // 0: provisioner.ProvisionTabletRequest
	(*ProvisionShardCellTablets)(nil), // 1: provisioner.ProvisionShardCellTablets
	(*ProvisionShardRequest)(nil),     // 2: provisioner.ProvisionShardRequest
	nil,                               // 3: provisioner.ProvisionTabletRequest.AttributesEntry
	nil,                               // 4: provisioner.ProvisionShardCellTablets.TabletTypesEntry
	(topodata.TabletType)(0),          // 5: topodata.TabletType
}
var file_provisioner_proto_depIdxs = []int32{
	5, // 0: provisioner.ProvisionTabletRequest.type:type_name -> topodata.TabletType
	3, // 1: provisioner.ProvisionTabletRequest.attributes:type_name -> provisioner.ProvisionTabletRequest.AttributesEntry
	4, // 2: provisioner.ProvisionShardCellTablets.tabletTypes:type_name -> provisioner.ProvisionShardCellTablets.TabletTypesEntry
	1, // 3: provisioner.ProvisionShardRequest.tablets:type_name -> provisioner.ProvisionShardCellTablets
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_provisioner_proto_init() }
func file_provisioner_proto_init() {
	if File_provisioner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_provisioner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionTabletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provisioner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionShardCellTablets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provisioner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_provisioner_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_provisioner_proto_goTypes,
		DependencyIndexes: file_provisioner_proto_depIdxs,
		MessageInfos:      file_provisioner_proto_msgTypes,
	}.Build()
	File_provisioner_proto = out.File
	file_provisioner_proto_rawDesc = nil
	file_provisioner_proto_goTypes = nil
	file_provisioner_proto_depIdxs = nil
}
